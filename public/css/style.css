html{line-height:1.15;-webkit-text-size-adjust:100%}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}[hidden],template{display:none}@font-face{font-family:Cond-Pro;font-weight:400;font-style:normal;src:url(../fonts/Cond-Pro-Regular.woff) format("woff"),url(../fonts/Cond-Pro-Regular.woff2) format("woff2"),url(../fonts/Cond-Pro-Regular.ttf) format("truetype")}@font-face{font-family:Cond-Pro;font-weight:500;font-style:normal;src:url(../fonts/Cond-Pro-Medium.woff) format("woff"),url(../fonts/Cond-Pro-Medium.woff2) format("woff2"),url(../fonts/Cond-Pro-Medium.ttf) format("truetype")}@font-face{font-family:Cond-Pro;font-weight:700;font-style:normal;src:url(../fonts/Cond-Pro-Bold.woff) format("woff"),url(../fonts/Cond-Pro-Bold.woff2) format("woff2"),url(../fonts/Cond-Pro-Bold.ttf) format("truetype")}*{-webkit-tap-highlight-color:transparent}*,:after,:before{box-sizing:border-box}html{font-family:Cond-Pro;font-size:100%;background-color:#fafafa;color:#121920}body{font-size:1.125rem;margin:0;padding:0;display:flex;flex-direction:column;text-rendering:optimizeLegibility}h1{font-size:30px;line-height:1.3}h1,h2,h3{text-transform:uppercase;margin-top:0;margin-bottom:0}ul{padding:0;margin:0;list-style:none}.container{max-width:1193px;padding:0 20px;width:100%;margin:0 auto}img{display:block}body.stop-scroll{overflow:hidden}.header{background-color:#fff;padding:15px 0;border-bottom:1px solid #e9edf1}.header .menu{display:flex;justify-content:space-between;align-items:center;position:relative}.header .menu__logo{margin-left:50px}@media (min-width:1024px){.header .menu__logo{margin-left:0}}.header .menu__logo:hover{opacity:.8}.header .menu__nav{opacity:0;visibility:hidden;position:absolute;z-index:10;top:-100vh;left:-20px;width:100vw;height:calc(100vh - 63px);background-color:#ffcd00;transition:all .3s linear 0s;overflow:hidden;padding:0 10px}@media (min-width:1024px){.header .menu__nav{position:static;height:auto;padding:0;max-width:352px;width:100%;background-color:inherit;opacity:1;visibility:visible}}.header .menu__nav .menu__list{border-bottom:1px solid #ecb200}@media (min-width:1024px){.header .menu__nav .menu__list{border-bottom:none;display:flex;align-items:center;justify-content:space-between}}.header .menu__nav .menu__list .menu__item{margin-top:20px;color:#5b1a0d;font-weight:500;font-size:16px;line-height:21px;text-transform:uppercase}@media (min-width:1024px){.header .menu__nav .menu__list .menu__item{margin-top:0}}.header .menu__nav .menu__list .menu__item:hover{text-decoration:underline}.header .menu__nav .menu__list .menu__link{text-decoration:none;color:inherit}.header .menu__nav .menu__list .menu__item:first-child{margin-top:0}.header .menu__nav .feedback__list{border-bottom:1px solid #ecb200}@media (min-width:1024px){.header .menu__nav .feedback__list{display:none}}.header .menu__nav .feedback__list .feedback__item{margin-top:15px;color:#5a1404;font-weight:500;font-size:14px;line-height:21px}.header .menu__nav .feedback__list .feedback__item:hover{text-decoration:underline}.header .menu__nav .feedback__list .feedback__link{text-decoration:none;color:inherit}.header .menu__nav .feedback__list .feedback__item:first-child{margin-top:0}.header .menu__nav .menu-social{padding:25px 10px}@media (min-width:1024px){.header .menu__nav .menu-social{display:none}}.header .menu__nav .menu-social__title{font-size:14px;line-height:21px;color:#5b1a0d;margin:0 0 11px}.header .menu__nav .menu-social .social{display:flex;align-items:center}.header .menu__nav .menu-social .social__item{display:flex;align-items:center;justify-content:center}.header .menu__nav .menu-social .social__item .social__link{display:flex;align-items:center;justify-content:center;background-color:#ecb200;border-radius:5px;width:32px;height:32px;margin-right:10px;transition:all .3s ease}.header .menu__nav .menu-social .social__item .social__link:hover{opacity:.7}.header .menu__nav .header__list{padding:25px 10px}@media (min-width:1024px){.header .menu__nav .header__list{padding:0}}.header .menu__nav.toggled{opacity:1;visibility:visible;top:48px}.header .menu .burger{position:absolute;left:0;top:50%;transform:translateY(-50%);overflow:hidden;padding:5px;transition:transform .3s ease 0s;cursor:pointer}@media (min-width:1024px){.header .menu .burger{display:none}}.header .menu .burger__line{width:23px;height:3px;background-color:#5b1a0d;border-radius:2px;transition:transform .3s ease 0s}.header .menu .burger__line:nth-child(2){margin:4px 0}.header .menu .burger.toggled .burger__line:first-child{transform:translateY(7px) rotate(-45deg)}.header .menu .burger.toggled .burger__line:nth-child(2){transform:translateX(-32px)}.header .menu .burger.toggled .burger__line:last-child{transform:translateY(-7px) rotate(45deg)}.header .menu .sign{display:flex}.header .menu .sign__in--yellow{text-align:center}.header .menu .sign__in--yellow .sign__in-btn{display:block;width:78px;height:32px;border-radius:29px;border:1px solid #ffcd00;background-color:#ffcd00;text-transform:uppercase;color:#5b1a0d;font-size:16px;line-height:32px;font-weight:500;text-decoration:none;transition:all .2s ease}.header .menu .sign__in--yellow .sign__in-btn:hover{background-color:#fff}.header .menu .sign__up{display:none}@media (min-width:1024px){.header .menu .sign__up{display:block;margin-left:17px}.header .menu .sign__up-btn{text-transform:uppercase;color:#5b1a0d;font-size:16px;line-height:32px;font-weight:500;text-decoration:none}.header .menu .sign__up-btn:hover{text-decoration:underline}}.cheese{background:linear-gradient(180deg,#ecb200,#ffcf00 200%);position:relative;padding-bottom:100px}@media (min-width:1280px){.cheese{padding-bottom:110px}}.cheese img{width:100%}.cheese__btn{font-family:Cond-Pro;width:164px;height:47px;background-color:#e63000;border:6px solid #ededed;border-radius:46px;font-weight:500;font-size:14px;line-height:21px;text-transform:uppercase;color:#fff;display:block;position:absolute;bottom:85px;left:50%;transform:translateX(-50%);filter:drop-shadow(0 0 37px #E7E7E7);cursor:pointer;transition:all .2s ease-out}.cheese__btn:hover{font-size:16px}@media (min-width:1024px){.cheese__btn{width:234px;height:69px;border:8px solid #ededed;font-size:16px}.cheese__btn:hover{font-size:18px}}.features{background:linear-gradient(180deg,#ecb200 -90%,#ffcf00 78.83%);position:relative;padding-bottom:28px}@media (min-width:1440px){.features{padding-bottom:45px}}.features:before{content:"";position:absolute;left:7.5%;top:93px;width:49px;height:98px;background-image:url(../images/feature-bg-1.svg);background-size:cover;background-position:50%;background-repeat:no-repeat}@media (min-width:1024px){.features:before{top:-70px;left:3.958%;width:80px;height:159px}}.features:after{content:"";position:absolute;right:13.6%;top:104px;width:21px;height:32px;background-image:url(../images/feature-bg-2.svg);background-size:cover;background-position:50%;background-repeat:no-repeat}@media (min-width:1024px){.features:after{top:-20px;right:5.138%;width:31px;height:37px}}.features__title{text-shadow:-2px 2px 0 #fff;text-transform:uppercase;font-size:34px;line-height:41px;font-weight:500;text-align:center;color:#e63000;margin-bottom:5px}@media (min-width:1024px){.features__title{font-size:60px;line-height:46px;margin-bottom:30px;text-shadow:-2px 4px 0 #fff}}.features .features-list{display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center}@media (min-width:1440px){.features .features-list{flex-direction:row;flex-wrap:wrap;align-items:flex-start;justify-content:space-between}}.features .features-list .features-item{display:flex;flex-direction:column;align-items:center;margin-top:27px}@media (min-width:1440px){.features .features-list .features-item{margin-right:68px}.features .features-list .features-item:last-child{margin-right:0}}.features .features-list .features-item:last-child .features-item__text:before{display:none}.features .features-list .features-item__img img{height:45px}.features .features-list .features-item__text{margin:22px auto;max-width:221px;width:100%;font-size:20px;line-height:22px;color:#5b1a0d;position:relative}.features .features-list .features-item__text:before{content:"";position:absolute;bottom:-22px;left:50%;width:21px;height:21px;border-left:3px solid #e30613;border-bottom:3px solid #e30613;border-radius:2px;transform:translateX(-50%) rotate(-45deg)}@media (min-width:1440px){.features .features-list .features-item__text:before{width:31px;height:31px;bottom:0;top:10px;left:calc(100% + 12px);transform:rotate(-135deg)}}.participants{padding:36px 0 120px;background:linear-gradient(180.05deg,#ededed 22.63%,#fff 99.95%);position:relative}@media (min-width:1440px){.participants{padding:66px 0 120px}}.participants:before{content:"";position:absolute;top:-21px;left:15%;width:45px;height:41px;background-image:url(../images/participants-bg.svg);background-repeat:no-repeat;background-size:cover;background-position:50%}@media (min-width:1440px){.participants:before{width:55px;height:50px;left:16.45%}}.participants__title{font-weight:500;font-size:30px;line-height:46px;text-align:center;text-transform:uppercase;color:#5b1a0d}@media (min-width:1024px){.participants__title{font-size:36px;line-height:46px}}.participants .swiper{text-align:center;padding-top:15px}@media (min-width:1440px){.participants .swiper{padding-top:23px;max-width:1173px;width:100%;margin:0 auto}}.participants .swiper-slide{width:141px}@media (min-width:1440px){.participants .swiper-slide{width:auto}}.participants .swiper .slide__img img{max-width:141px;margin:0 auto}@media (min-width:1440px){.participants .swiper .slide__img img{max-width:198px}}.participants .swiper .slide__descr{font-size:18px;line-height:22px;color:#5a1404;margin:22px 0 0}.participants .swiper #participantsPagination{margin-top:50px}.participants .swiper .swiper-pagination-bullet{width:11px;height:11px;background-color:#5b1a0d;border:1px solid #5b1a0d;opacity:1;transition:all .3s ease-in}.participants .swiper .swiper-pagination-bullet:hover{opacity:.7}.participants .swiper .swiper-pagination-bullet-active{width:11px;height:11px;background-color:#f8f8f8;border:1px solid #5b1a0d}.participants .swiper #part-next,.participants .swiper #part-prev{display:none;position:absolute;z-index:2;top:40%;right:5px;width:21px;height:21px;border-left:5px solid #5a1404;border-bottom:5px solid #5a1404;border-radius:2px;transform:translateY(-50%) rotate(-135deg);cursor:pointer;transition:all .2s linear}.participants .swiper #part-next:hover,.participants .swiper #part-prev:hover{opacity:.7}@media (min-width:1440px){.participants .swiper #part-next,.participants .swiper #part-prev{display:block}}.participants .swiper #part-prev{left:5px;right:auto;transform:translateY(-50%) rotate(45deg)}.footer{position:relative;background-color:#fefefe;padding:24px 0 38px}@media (min-width:1024px){.footer{padding:22px 0 9px}}.footer__container{display:flex;flex-direction:column;align-items:center;justify-content:center}@media (min-width:1024px){.footer__container{flex-direction:row;align-items:flex-start}}.footer__nav{order:-1;max-width:273px;width:100%;margin:0 auto}@media (min-width:1024px){.footer__nav{max-width:353px;order:0}}.footer__nav .footer__list{display:flex;align-items:center;justify-content:space-between}.footer__nav .footer__list .footer__item .footer__link{font-weight:500;font-size:14px;line-height:21px;color:#5a1404;text-decoration:none}@media (min-width:1024px){.footer__nav .footer__list .footer__item .footer__link{font-size:16px}}.footer__nav .footer__list .footer__item .footer__link:hover{text-decoration:underline}.footer-info{display:flex;flex-direction:column;align-items:center;margin-top:25px}@media (min-width:1024px){.footer-info{margin-top:0;align-items:flex-start}}.footer-info__title{font-size:14px;line-height:18px;color:#5a1404;text-transform:uppercase;margin:0}@media (min-width:1024px){.footer-info__title{font-size:16px}}.footer-info__phone{text-decoration:none;color:#e43219;font-size:30px;line-height:40px;margin-top:5px}@media (min-width:1024px){.footer-info__phone{font-size:36px;line-height:48px}}.footer-info__phone:hover{text-decoration:underline}.footer-info__copy{position:absolute;bottom:0;left:50%;transform:translateX(-50%);font-size:10px;line-height:21px;color:#5b1a0d;margin-top:5px}@media (min-width:1024px){.footer-info__copy{font-size:12px;position:static;transform:none;margin-top:0}}.footer-social{display:flex;flex-direction:column;align-items:center;justify-content:center}.footer-social__title{font-size:14px;line-height:21px;color:#5b1a0d;margin:0 0 11px}@media (min-width:1024px){.footer-social__title{font-size:16px}}.footer-social .social{display:flex;align-items:center}.footer-social .social__item,.footer-social .social__item .social__link{display:flex;align-items:center;justify-content:center}.footer-social .social__item .social__link{background-color:#ffcd00;border-radius:5px;width:32px;height:32px;margin-right:10px;transition:all .3s ease}.footer-social .social__item .social__link:hover{opacity:.7}.modal{position:fixed;top:0;right:0;bottom:0;left:0;background:rgba(0,0,0,.5);z-index:1050;opacity:0;transition:opacity .2s ease-in;pointer-events:none;margin:0;padding:0}.modal:target{opacity:1;pointer-events:auto;overflow-y:auto}.modal__dialog{position:relative;width:auto;margin:10px}@media (min-width:576px){.modal__dialog{max-width:500px;margin:30px auto}}.modal__content{position:relative;display:flex;flex-direction:column;background-color:#fff;-webkit-background-clip:padding-box;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem;outline:0}@media (min-width:768px){.modal__content{box-shadow:0 5px 15px rgba(0,0,0,.5)}}.modal__header{display:flex;align-items:center;justify-content:space-between;padding:15px;border-bottom:1px solid #eceeef}.modal__title{margin-top:0;margin-bottom:0;line-height:1.5;font-size:1.25rem;font-weight:500}.close{float:right;font-family:sans-serif;font-size:24px;font-weight:700;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.5;text-decoration:none}.close:focus,.close:hover{color:#000;text-decoration:none;cursor:pointer;opacity:.75}.modal__body{position:relative;flex:1 1 auto;padding:15px;overflow:auto}
/*# sourceMappingURL=data:application/json;base64, */